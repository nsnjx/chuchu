import 'package:chuchu/core/utils/navigator/page_router.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

enum ChuChuPushPageType {
  slideToLeft,
  noAnimation,
  opacity,
  transparent,
}

enum ChuChuStackPageOption { reset, push, pop, replace }

class ChuChuNavigator extends Navigator {
  static final GlobalKey<NavigatorState> navigatorKey =
      new GlobalKey<NavigatorState>();

  static List<NavigatorObserver> observer = [];

  static RouteObserver routeObserver = RouteObserver();

  static bool canPop(BuildContext context) {
    return Navigator.canPop(context);
  }

  @optionalTypeArgs
  static void pop<T extends Object?>(BuildContext? context, [T? result]) {
    context ??= navigatorKey.currentContext;
    if (context == null) return;

    // Remove the current focus
    FocusScope.of(context).requestFocus(FocusNode());

    if (canPop(context)) {
      Navigator.pop(context, result);
    } else {
      SystemNavigator.pop();
    }
  }

  /// Flutter stack
  static void popToRoot<T extends Object>(BuildContext context) {
    // Remove the current focus
    FocusScope.of(context).requestFocus(FocusNode());
    if (canPop(context)) {
      Navigator.popUntil(context, (Route<dynamic> route) {
        return route.isFirst;
      });
    }
  }

  /// Pop to a specific page (currently only supported within the Flutter stack)
  /// pageType: The 'runtimeType.toString' of the page, which is used to simply specify the pop of the page
  /// pageId: Specified pageId, used for more complex navigation pops to a designated page. The pageId is generated by the designated page itself
  static void popToPage<T extends Object>(BuildContext context,
      {String? pageType, Object? pageId, isPrepage = false}) {
    assert(() {
      if (pageType == null && pageId == null) {
        throw FlutterError(
            'The ChuChuNavigator.popToPage method requires at least one of the parameters: pageType or pageId.');
      }
      return true;
    }());
    // Remove the current focus
    FocusScope.of(context).requestFocus(FocusNode());
    bool isFindPage = false;
    int prepage = 0;
    Navigator.popUntil(context, (Route<dynamic> route) {
      bool checkPageType = true;
      ChuChuRouteSettings? settings;
      try {
        settings = route.settings as ChuChuRouteSettings;
      } catch (_) {}

      if (pageType != null && !isFindPage) {
        checkPageType = settings?.name == pageType;
        isFindPage = checkPageType;
      }
      bool checkPageId = true;
      if (pageId != null && !isFindPage) {
        checkPageId = settings?.pageId == pageId;
        isFindPage = checkPageId;
      }
      final bool isTargetPage = isPrepage
          ? (prepage == 1) && (checkPageType && checkPageId)
          : checkPageType && checkPageId;
      if (isFindPage) {
        prepage = 1;
      }
      return isTargetPage || route.isFirst;
    });
  }

  static void close(BuildContext context) {
    // Remove the current focus
    FocusScope.of(context).requestFocus(FocusNode());
    SystemNavigator.pop();
  }

  @optionalTypeArgs
  static Future<T?> _push<T extends Object?>(
      BuildContext context, Route<T> route) {
    // // Remove the current focus
    // FocusScope.of(context).requestFocus(FocusNode());
    _pushPreHandle(context);
    return Navigator.push<T>(context, route);
  }

  static void _pushPreHandle(BuildContext context) {
    final currentSettings = ModalRoute.of(context)?.settings;
    if (currentSettings is! ChuChuRouteSettings) return;

    if (currentSettings.isShortLived) {
      Navigator.pop(context);
    }
  }

  static Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
    BuildContext context,
    Widget page, {
    String? pageName,
    Object? pageId,
    bool? isShortLived,
    TO? result,
  }) {
    return Navigator.pushReplacement<T, TO>(
      context,
      generalPageRouter(
        pageName: pageName,
        pageId: pageId,
        isShortLived: isShortLived,
        builder: (_) => page,
      ),
      result: result,
    );
  }

  @optionalTypeArgs
  static Future<T?> pushPage<T extends Object?>(
    BuildContext? context,
    Widget Function(BuildContext? context) builder, {
    String? pageName,
    Object? pageId,
    bool? isShortLived,
    bool fullscreenDialog = false,
    ChuChuPushPageType type = ChuChuPushPageType.slideToLeft,
  }) {
    pageName ??= builder(null).runtimeType.toString();
    context ??= navigatorKey.currentContext;
    if (context == null) return Future.value(null);

    final routeSettings = ChuChuRouteSettings(
      name: pageName,
      pageId: pageId,
      isShortLived: isShortLived,
    );
    PageRoute<T> route;

    switch (type) {
      case ChuChuPushPageType.slideToLeft:
        route = SlideLeftToRightRoute<T>(
          fullscreenDialog: fullscreenDialog,
          settings: routeSettings,
          builder: builder,
        );
      case ChuChuPushPageType.noAnimation:
        route = NoAnimationPageRoute<T>(
          builder: builder,
          settings: routeSettings,
        );
      case ChuChuPushPageType.opacity:
        route = OpacityAnimationPageRoute<T>(
          builder: builder,
          settings: routeSettings,
        );
      case ChuChuPushPageType.transparent:
        route = TransparentPageRoute<T>(
          builder: builder,
          settings: routeSettings,
        );
    }

    return ChuChuNavigator._push(
      context,
      route,
    );
  }

  static Future<T?> presentPage<T extends Object?>(
    BuildContext? context,
    Widget Function(BuildContext? context) builder, {
    String? pageName,
    Object? pageId,
    bool? isShortLived,
    bool fullscreenDialog = false,
    bool allowPageScroll = false,
  }) {
    context ??= navigatorKey.currentContext;
    if (context == null) return Future.value(null);

    pageName ??= builder(null).runtimeType.toString();
    if (fullscreenDialog) {
      return ChuChuNavigator._push(
        context,
        generalPageRouter<T>(
          builder: builder,
          pageName: pageName,
          pageId: pageId,
          isShortLived: isShortLived,
          fullscreenDialog: true,
        ),
      );
    } else {
      return showModalBottomSheet(
        context: context,
        isScrollControlled: true,
        enableDrag: !allowPageScroll,
        backgroundColor: Colors.transparent,
        builder: (BuildContext context) => Container(
          height: MediaQuery.of(context).size.height * 0.9,
          child: builder(context),
        ),
      );
    }
  }

  static PageRoute<T> generalPageRouter<T>({
    required Widget Function(BuildContext? context) builder,
    String? pageName,
    Object? pageId,
    bool? isShortLived,
    fullscreenDialog = false,
  }) {
    return SlideLeftToRightRoute<T>(
      fullscreenDialog: fullscreenDialog,
      settings: ChuChuRouteSettings(
        name: pageName,
        pageId: pageId,
        isShortLived: isShortLived,
      ),
      builder: builder,
    );
  }
}

class ChuChuRouteSettings extends RouteSettings {
  const ChuChuRouteSettings({
    super.name,
    this.pageId,
    bool? isShortLived,
  }) : isShortLived = isShortLived ?? false;

  final Object? pageId;
  final bool isShortLived;
}
